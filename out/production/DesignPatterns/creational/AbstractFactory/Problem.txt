## üéØ **Abstract Factory Pattern: Practice Problem**

### üìö **Problem Statement: Design a Notification System Using Abstract Factory**

---

## üìù **Scenario:**

You have been tasked with building a **Notification System** that can send different types of notifications (e.g., SMS, Email, and Push Notifications) for different platforms (e.g., Android and iOS).  

The system should be flexible so that:

‚úÖ It supports sending **multiple types of notifications**.  
‚úÖ It can easily be extended to add new notification types or platforms.  
‚úÖ The client should not be aware of the concrete classes being used.  

---

## üìå **Requirements:**

1. **Notification Types:**
   - SMS Notification
   - Email Notification
   - Push Notification

2. **Platforms Supported:**
   - Android
   - iOS

3. **Objective:**
   - Implement the **Abstract Factory Pattern** to create notifications for different platforms.
   - Ensure that platform-specific notifications are created without changing client code.
   - The system should be extensible to support new platforms or notification types easily.

---

## ‚ö°Ô∏è **Functional Requirements:**

- `Notification` interface with a method `sendNotification(String message)`.
- Concrete classes for different types of notifications (`SMSNotification`, `EmailNotification`, `PushNotification`).
- `NotificationFactory` interface with a method `createNotification(String type)`.
- Concrete factories for platforms (`AndroidNotificationFactory`, `iOSNotificationFactory`).
- `NotificationService` class to get the appropriate factory and send notifications.

---

## üî• **Challenge:**

1. Design the class hierarchy and implement the **Abstract Factory Pattern**.
2. Create platform-specific notification factories (`Android` and `iOS`).
3. Use the factories to generate appropriate notifications for each platform.
4. Ensure that the client code can send any type of notification without knowing about the underlying implementation.

---

## üéØ **Expected Usage:**

```java
public class Main {
    public static void main(String[] args) {
        // Get Android Notification Factory
        NotificationFactory androidFactory = FactoryProducer.getFactory("ANDROID");
        Notification smsNotification = androidFactory.createNotification("SMS");
        smsNotification.sendNotification("Hello from Android!");

        // Get iOS Notification Factory
        NotificationFactory iosFactory = FactoryProducer.getFactory("IOS");
        Notification emailNotification = iosFactory.createNotification("EMAIL");
        emailNotification.sendNotification("Welcome to iOS!");

        // Send Push Notification on Android
        Notification pushNotification = androidFactory.createNotification("PUSH");
        pushNotification.sendNotification("Push Notification Sent on Android!");
    }
}
```

---

## üöÄ **Bonus Challenge:**

‚úÖ Add support for a new platform: **Windows**.  
‚úÖ Add support for a new notification type: **In-App Notification**.  

---

## üìù **Hints:**

1. Create a `Notification` interface.
2. Implement concrete notification classes.
3. Design an abstract factory `NotificationFactory` with a method `createNotification(String type)`.
4. Create platform-specific factories (`AndroidNotificationFactory`, `iOSNotificationFactory`).
5. Use a `FactoryProducer` to return the appropriate factory.

---

## üéâ **Difficulty Level:**
- üü¢ Basic: Implement basic notification types and platforms.
- üü° Intermediate: Add new notification types and platforms.
- üî¥ Advanced: Implement error handling and logging.

---

Let me know when you're ready, and I‚Äôll guide you step-by-step with hints and solutions! üöÄüòä